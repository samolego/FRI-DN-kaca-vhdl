import datetime
import os
import cv2


TEMPLATE_FILE = 'sources_1/new/index2sprite.template.vhd'
OUTPUT_FILE = 'sources_1/new/index2sprite.vhd'
ASSETS_FOLDER = 'assets/'
REPLACE_PATTERN = '-- {{ cases }}'
INVERTED_COLORS = False

def main():
    convert_images(TEMPLATE_FILE, OUTPUT_FILE, ASSETS_FOLDER, REPLACE_PATTERN, INVERTED_COLORS)


def convert_images(template_vhd_file, output_vhd_file, assets_folder, replace_pattern, inverted_theme):
    """
    'Converts' images in assets folder to VHDL code and writes it to output file.
    """
    # Open template file
    with open(template_vhd_file, 'r') as f:
        template = f.read()

        # Get images in assets folder
        images = os.listdir(assets_folder)
        images = [i for i in images if i.endswith('.png')]
        images.sort()
        print("Converting {} images".format(len(images)))

        # Convert images to matrices of black & white pixels
        sprites = {}
        for direction in images:
            print("Converting", direction)
            # Load image
            img = cv2.imread(assets_folder + direction, cv2.IMREAD_GRAYSCALE)
            # Convert to black & white
            img[img < 128] = 1 if inverted_theme else 0
            img[img >= 128] = 0 if inverted_theme else 1

            # Reshape to horizontal vector
            img = img.reshape(1, -1)

            # Put in sprites
            name = direction.split('.')[0]
            sprites[name] = img
        
        # Generate VHDL code from sprites
        code = ''

        # Find intendation of replace_pattern
        replace_pattern_line = next(line for line in template.split('\n') if replace_pattern in line)

        # Calculate the indentation by counting the leading spaces
        replace_pattern_indent = len(replace_pattern_line) - len(replace_pattern_line.lstrip(' '))

        for name, sprite in sprites.items():
            spaces = " " * replace_pattern_indent
            code += "\n" + spaces + '"{}"'.format(''.join(map(str, sprite[0])))
            code += ' when "{}",'.format(name)

        
        # Replace template with generated code
        template = template.replace(replace_pattern, code)

        # Write to output file
        with open(output_vhd_file, 'w') as f:
            header = "----------------------------------\
                    \n-- GENERATED CODE\
                    \n-- Do not edit this file directly\
                    \n----------------------------------"
        
            date_now = datetime.datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            header += "\n-- Generated on {}\n".format(date_now)

            f.write(header)
            f.write(template)


    


if __name__ == '__main__':
    main()
